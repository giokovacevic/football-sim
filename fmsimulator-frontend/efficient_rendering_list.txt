import { useEffect, useState, useRef } from 'react';

const itemHeight = 60; // Adjust based on your PlayerListMember height
const containerHeight = 600; // Fixed height of scroll container

const PlayerList = ({ players, variant, includeHeader }: PlayerListProps) => {
  // ... your existing states for sorting
  const [sortedPlayers, setSortedPlayers] = useState<Player[]>([...players]);

  // New states for virtualization
  const [scrollTop, setScrollTop] = useState(0);
  const containerRef = useRef<HTMLDivElement>(null);

  // Calculate how many items fit in view + buffer
  const itemsPerPage = Math.ceil(containerHeight / itemHeight);
  const buffer = 5;

  // Calculate slice indices
  const startIndex = Math.floor(scrollTop / itemHeight);
  const endIndex = Math.min(startIndex + itemsPerPage + buffer, sortedPlayers.length);

  const visiblePlayers = sortedPlayers.slice(startIndex, endIndex);

  const onScroll = (e: React.UIEvent<HTMLDivElement>) => {
    setScrollTop(e.currentTarget.scrollTop);
  };

  // Your existing sortPlayers and handleHeaderOnClick...

  return (
    <div
      className={styles.playerlist_root}
      style={{ height: containerHeight, overflowY: 'auto' }}
      onScroll={onScroll}
      ref={containerRef}
    >
      {includeHeader && (
        <PlayerListHeader
          onHeaderClicked={handleHeaderOnClick}
          variant={variant}
        />
      )}

      {/* Outer div for full height to keep scrollbar */}
      <div style={{ height: sortedPlayers.length * itemHeight, position: 'relative' }}>
        {/* Absolutely positioned inner div that shifts the visible players down */}
        <div
          style={{
            position: 'absolute',
            top: startIndex * itemHeight,
            left: 0,
            right: 0,
          }}
        >
          {visiblePlayers.map((player) => (
            <PlayerListMember key={player.id} player={player} variant={variant} />
          ))}
        </div>
      </div>
    </div>
  );
};